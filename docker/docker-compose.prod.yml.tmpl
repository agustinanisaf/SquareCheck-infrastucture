version: '3.7'

services: 
  reverse-proxy:
    image: traefik:v2.3
    restart: unless-stopped
    ports: 
      - 80:80
      - 443:443
    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.toml:/traefik.toml
      - ./traefik_dynamic.toml:/traefik_dynamic.toml
      - ./acme.json:/acme.json
    networks:
      - square_check

  backend:
    image: squarecheck/backend:latest
    restart: unless-stopped
    labels: 
      - traefik.http.routers.backend.rule=Host(`${api-fqdn}`)
      - traefik.http.routers.backend.tls=true
      - traefik.http.routers.backend.tls.certresolver=lets-encrypt
      - traefik.port=80
    env_file: ".env"
    networks:
      - square_check
      - internal
    depends_on:
      - db
  
  frontend:
    image: squarecheck/frontend:latest
    restart: unless-stopped
    labels: 
      - traefik.http.routers.frontend.rule=Host(`${www-fqdn}`, `${www-domain}`)
      - traefik.http.routers.frontend.tls=true
      - traefik.http.routers.frontend.tls.certresolver=lets-encrypt
      - traefik.port=80
    networks:
      - square_check
    depends_on:
      - backend

  db:
    image: postgres:11.2-alpine
    restart: on-failure
    volumes: 
      - postgres-data:/var/lib/postgresql/data
    env_file: ".env"
    labels:
      - traefik.enable=false
    networks:
      - internal

  cache:
    restart: unless-stopped
    image: redis:4.0-alpine
    labels:
      - traefik.enable=false
    networks:
      - internal

volumes:
  postgres-data:
    driver: local

networks:
  square_check:
    external: true
  internal:
    external: false
