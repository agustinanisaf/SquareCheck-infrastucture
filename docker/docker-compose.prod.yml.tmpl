version: '3.7'

services: 
  reverse-proxy:
    image: traefik:v2.3
    restart: unless-stopped
    ports: 
      - 80:80
      - 443:443
    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.toml:/traefik.toml
      - ./traefik_dynamic.toml:/traefik_dynamic.toml
      - ./acme.json:/acme.json
    networks:
      - square_check

  backend:
    deploy:
      replicas: 2
    image: squarecheck/backend:latest
    restart: always
    labels: 
      - traefik.http.routers.backend.rule=Host(`${api-fqdn}`)
      - traefik.http.routers.backend.tls=true
      - traefik.http.routers.backend.tls.certresolver=lets-encrypt
      - traefik.http.services.backend.loadbalancer.healthcheck.path=/
      - traefik.http.services.backend.loadbalancer.healthcheck.interval=10s
      - traefik.http.services.backend.loadbalancer.healthcheck.timeout=2s
      - traefik.port=443
      - traefik.docker.network=square_check
    env_file: ".env"
    healthcheck:
      test: curl http://127.0.0.1 -s -f -o /dev/null || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - square_check
      - internal
    depends_on:
      - db
  
  frontend:
    deploy:
      replicas: 2
    image: squarecheck/frontend:latest
    restart: always
    labels: 
      - traefik.http.routers.frontend.rule=Host(`${www-fqdn}`, `${www-domain}`)
      - traefik.http.routers.frontend.tls=true
      - traefik.http.routers.frontend.tls.certresolver=lets-encrypt
      - traefik.http.services.frontend.loadbalancer.healthcheck.path=/
      - traefik.http.services.frontend.loadbalancer.healthcheck.interval=10s
      - traefik.http.services.frontend.loadbalancer.healthcheck.timeout=2s
      - traefik.port=80
    healthcheck:
      test: curl http://127.0.0.1 -s -f -o /dev/null || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - square_check
    depends_on:
      - backend

  autoheal:
    restart: always
    image: willfarrell/autoheal
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  db:
    image: postgres:11.2-alpine
    restart: on-failure
    volumes: 
      - postgres-data:/var/lib/postgresql/data
    env_file: ".env"
    labels:
      - traefik.enable=false
    networks:
      - internal

  cache:
    restart: unless-stopped
    image: redis:4.0-alpine
    labels:
      - traefik.enable=false
    networks:
      - internal

  minio:
    image: minio/minio
    labels: 
      - traefik.http.routers.minio.rule=Host(`${s3-fqdn}`)
      - traefik.http.routers.minio.tls=true
      - traefik.http.routers.minio.tls.certresolver=lets-encrypt
      - traefik.http.services.minio.loadbalancer.server.port=9000
      - traefik.port=9000
    command: minio server /data
    env_file: ".env"
    networks:
      - square_check
    volumes: 
      - minio-data:/data

volumes:
  postgres-data:
    driver: local
  minio-data:
    driver: local

networks:
  square_check:
    external: true
  internal:
    external: false
